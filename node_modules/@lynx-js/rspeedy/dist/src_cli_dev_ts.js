export const __webpack_ids__ = [
    'src_cli_dev_ts'
];
export const __webpack_modules__ = {
    "./src/cli/dev.ts": function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__);
        __webpack_require__.d(__webpack_exports__, {
            dev: ()=>dev
        });
        var node_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("node:path");
        var _rsbuild_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("@rsbuild/core");
        var picocolors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../../node_modules/.pnpm/picocolors@1.1.1/node_modules/picocolors/picocolors.js");
        var picocolors__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/ __webpack_require__.n(picocolors__WEBPACK_IMPORTED_MODULE_5__);
        var _config_loadConfig_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/config/loadConfig.ts");
        var _create_rspeedy_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/create-rspeedy.ts");
        var _exit_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/cli/exit.ts");
        async function dev(cwd, devOptions) {
            let onBeforeRestart = [];
            try {
                const configPath = (0, _config_loadConfig_js__WEBPACK_IMPORTED_MODULE_2__.Mk)(cwd, devOptions.config);
                const { content: rspeedyConfig } = await (0, _config_loadConfig_js__WEBPACK_IMPORTED_MODULE_2__.ME)({
                    cwd,
                    configPath
                });
                if (devOptions.base) {
                    rspeedyConfig.server ??= {};
                    rspeedyConfig.server.base = devOptions.base;
                }
                const watchedFiles = [
                    configPath
                ];
                if (Array.isArray(rspeedyConfig.dev?.watchFiles)) watchedFiles.push(...rspeedyConfig.dev.watchFiles.filter((item)=>'reload-server' === item.type).flatMap((item)=>item.paths));
                else if (rspeedyConfig.dev?.watchFiles?.type === 'reload-server') {
                    const { paths } = rspeedyConfig.dev.watchFiles;
                    watchedFiles.push(...Array.isArray(paths) ? paths : [
                        paths
                    ]);
                }
                await watchFiles(watchedFiles.map((filePath)=>node_path__WEBPACK_IMPORTED_MODULE_0__["default"].isAbsolute(filePath) ? filePath : node_path__WEBPACK_IMPORTED_MODULE_0__["default"].join(cwd, filePath)), async (filename)=>{
                    _rsbuild_core__WEBPACK_IMPORTED_MODULE_1__.logger.info(`Restart because ${picocolors__WEBPACK_IMPORTED_MODULE_5___default().yellow(filename)} is changed.\n`);
                    const cleanup = onBeforeRestart.map((f)=>f());
                    onBeforeRestart = [];
                    await Promise.all(cleanup);
                    await dev.call(this, cwd, devOptions);
                });
                const options = {
                    cwd,
                    rspeedyConfig
                };
                if (devOptions.envMode) options.loadEnv = {
                    mode: devOptions.envMode
                };
                if (devOptions.environment) options.environment = devOptions.environment;
                const rspeedy = await (0, _create_rspeedy_js__WEBPACK_IMPORTED_MODULE_3__.S)(options);
                const server = await rspeedy.createDevServer();
                const { server: { close } } = await server.listen();
                onBeforeRestart.push(close);
            } catch (error) {
                _rsbuild_core__WEBPACK_IMPORTED_MODULE_1__.logger.error(error);
                (0, _exit_js__WEBPACK_IMPORTED_MODULE_4__.exit)(1);
            }
        }
        async function watchFiles(files, callback) {
            const chokidar = await __webpack_require__.e("vendors-node_modules_pnpm_chokidar_4_0_3_node_modules_chokidar_esm_index_js").then(__webpack_require__.bind(__webpack_require__, "../../../node_modules/.pnpm/chokidar@4.0.3/node_modules/chokidar/esm/index.js"));
            const watcher = chokidar.default.watch(files, {
                ignoreInitial: true,
                ignorePermissionErrors: true
            });
            const cb = debounce((event, filePath)=>{
                const startTime = Date.now();
                watcher.close().then(()=>callback(filePath, startTime, event));
            }, 300);
            watcher.once('add', cb.bind(null, 'add'));
            watcher.once('change', cb.bind(null, 'change'));
            watcher.once('unlink', cb.bind(null, 'unlink'));
        }
        function debounce(func, wait) {
            let timeoutId = null;
            return (...args)=>{
                if (null !== timeoutId) clearTimeout(timeoutId);
                timeoutId = setTimeout(()=>{
                    func(...args);
                }, wait);
            };
        }
    }
};
